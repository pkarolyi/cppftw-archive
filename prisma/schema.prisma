generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication, see https://next-auth.js.org/adapters/prisma

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  ok                Boolean?
  state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
}

// end auth

model ArchiveUser {
  id       String  @id // slack id
  name     String
  imageUrl String?

  ArchiveMessage       ArchiveMessage[]
  ArchiveThreadMessage ArchiveThreadMessage[]
}

model ArchiveChannel {
  id   String @id // slack id
  name String @unique

  ArchiveMessage ArchiveMessage[]
}

model ArchiveMessage {
  id        String  @id // no slack id for messages
  ts        String
  text      String
  channelId String
  userId    String
  isThread  Boolean @default(false)

  user    ArchiveUser    @relation(fields: [userId], references: [id])
  channel ArchiveChannel @relation(fields: [channelId], references: [id])

  ArchiveThreadMessage ArchiveThreadMessage[]

  @@unique([channelId, userId, ts])
}

model ArchiveThreadMessage {
  id       String @id // no slack id for messages
  ts       String
  text     String
  userId   String
  parentId String

  user   ArchiveUser    @relation(fields: [userId], references: [id])
  parent ArchiveMessage @relation(fields: [parentId], references: [id])

  @@unique([parentId, userId, ts])
}
